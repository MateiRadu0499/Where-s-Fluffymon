@page "/post"
@using System.Timers
@layout MainLayout
@inject NavigationManager NavManager
@using FluffymonPWA.Client.Models
@inject HttpClient Http
@using System.Globalization;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h1>Information about the lost pet</h1>


<div class="make-post-container">
    <div class="form-container">
        <EditForm Model="@post" OnValidSubmit="MakePost">
            <div class="form-group">
                <InputText id="title" class="form-control" placeholder="Title"
                           @bind-Value="post.Title" />
                <ValidationMessage For="@(() => post.Title)" />
            </div>
            <div class="form-group">
                <InputText id="description" class="form-control" placeholder="Description"
                           @bind-Value="post.Description" />
                <ValidationMessage For="@(() => post.Description)" />
            </div>
            <div class="form-group">
                <InputText id="reward" class="form-control" placeholder="Reward" 
                           @bind-Value="post.Reward" pattern="^$?(([1-9](\d|\d{0,2}(,\d{3})))|0)(.\d{1,2})?$"/>
                <ValidationMessage For="@(() => post.Reward)" />
            </div>

            <div class="form-group">
                <input class="btn btn-primary btn-block" type="submit" value="Submit" />
            </div>
        </EditForm>
        <h3>@goodMessage</h3>
        <h4>@badMessage</h4>
    </div>
</div>
@code {
    private Post post = new Post();
    private string res = "";
    private static Timer timer;
    public string latitude { get; set; }
    public string longitude { get; set; }
    public string localId { get; set; }
    private string goodMessage = "";
    private string badMessage = "";

    protected async Task MakePost()
    {
        latitude = await localStorage.GetItemAsStringAsync("latitude");
        longitude = await localStorage.GetItemAsStringAsync("longitude");
        localId = await localStorage.GetItemAsStringAsync("id");

        post.Latitude = float.Parse(latitude, CultureInfo.InvariantCulture.NumberFormat);
        post.Longitude = float.Parse(longitude, CultureInfo.InvariantCulture.NumberFormat);
        //post.IdUser = Int16.Parse(localId);
        post.Date = DateTime.Now;
        HttpResponseMessage response = await
            Http.PostAsJsonAsync<Post>("/api/v1/post", post);
        if (response.StatusCode.ToString() == "OK")
        {
            res = "Post created succesfully";
            badMessage = "";
            goodMessage = res;

        }
        else
        {
            res = "Something went wrong when creating the post.";
            badMessage = res;
            goodMessage = "";

        }
    }
}
