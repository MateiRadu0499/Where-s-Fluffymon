@page "/login"
@layout LoginLayout
@using FluffymonPWA.Client.Models
@using System.Timers
@inject NavigationManager NavManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http

<div class="login-container">
    <h1 class="text-center" style="color:white"><strong>Fluffymon Login</strong></h1>
    <div class="form-container">
        <form method="post">
            <EditForm Model="@user" OnValidSubmit="LoginUser">
                <div class="form-group">
                    <InputText id="username" class="form-control" placeholder="Username"
                               @bind-Value="user.Username" />
                </div>

                <div class="form-group">
                    <InputText type="password" id="password" class="form-control" placeholder="Password"
                               @bind-Value="user.Password" />
                </div>

                <div class="form-group">
                    <input class="btn btn-primary btn-block" type="submit" value="Submit">
                    <a class="linko" href="/register"> Don't have an account? Register here.</a>
                    <a class="linko" href="/forgotpassword"> Forgot your password? Click here.</a>
                </div>
            </EditForm>
        </form>
    </div>
    <h2>@res</h2>
</div>

@code {
    private User user = new User();
    private string res = "";
    private static Timer timer;
    private string localId;


    protected async Task LoginUser()
    {
        HttpResponseMessage response = await Http.PostAsJsonAsync<User>("/api/v1/Login", user);
        if (response.StatusCode.ToString() == "OK")
        {
            localId = Convert.ToString(response.Content.ReadAsStringAsync());
            await localStorage.SetItemAsync("authenticated", "True");
            await localStorage.SetItemAsync("id", response.Content.ReadAsStringAsync());
            res = "Logged in succesfully!";

            timer = new Timer();
            timer.Interval = 2000;

            timer.Elapsed += (sender, args) =>
            {
                NavManager.NavigateTo("/profile", true);
            };

            timer.AutoReset = true;
            timer.Enabled = true;
        }
        else
        {
            res = "Username or password incorrect, try again.";
        }

    }
}