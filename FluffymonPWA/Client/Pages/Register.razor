@page "/register"
@using System.Timers
@layout LoginLayout
@inject NavigationManager NavManager
@using FluffymonPWA.Client.Models
@inject HttpClient Http

<div class="all">
    <h3 class="text-center" style="color:white"><strong>Create an account</strong></h3>
    <div class="register-container">
        <div class="form-container">
            <form method="post">
                <EditForm Model="@user" OnValidSubmit="RegisterUser">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <InputText id="username" class="form-control" placeholder="Username"
                                   @bind-Value="user.Username" />
                        <ValidationMessage For="@(() => user.Username)" />
                    </div>
                    <div class="form-group">
                        <InputText id="firstName" class="form-control" placeholder="First Name"
                                   @bind-Value="user.FirstName" />
                        <ValidationMessage For="@(() => user.FirstName)" />
                    </div>
                    <div class="form-group">
                        <InputText id="lastName" class="form-control" placeholder="Last Name"
                                   @bind-Value="user.LastName" />
                        <ValidationMessage For="@(() => user.LastName)" />
                    </div>
                    <div class="form-group">
                        <InputText id="phoneNumber" class="form-control" placeholder="PhoneNumber"
                                   @bind-Value="user.PhoneNumber" />
                        <ValidationMessage For="@(() => user.PhoneNumber)" />
                    </div>
                    <div class="form-group">
                        <InputText id="email" class="form-control" placeholder="Email"
                                   @bind-Value="user.Email" />
                        <ValidationMessage For="@(() => user.Email)" />
                    </div>
                    <div class="form-group">
                        <InputText type="password" class="form-control" id="register-password" placeholder="Password"
                                   @bind-Value="user.Password" />
                        <ValidationMessage For="@(() => user.Password)" />
                    </div>

                    <div class="form-group">
                        <InputText type="password" class="form-control" id="confirm-password" placeholder="Confirm Password"
                                   @bind-Value="ConfirmPassword" />
                        <ValidationMessage For="@(() => ConfirmPassword)" />
                    </div>

                    <div class="form-group">
                        <input class="btn btn-primary btn-block" type="submit" value="Submit" />
                        <a class="links" href="/login">Already have an account? Click here to login.</a>
                    </div>

                </EditForm>
            </form>
        </div>
        <h3>@goodMessage</h3>
        <h4>@badMessage</h4>
    </div>
</div>

<p>@res</p>

@code {
    private User user = new User();
    private string res = "";
    private static Timer timer;
    private string ConfirmPassword = "";
    private string goodMessage = "";
    private string badMessage = "";

    protected async Task RegisterUser()
    {

        if (user.Password != ConfirmPassword)
        {
            res = "Passwords do not match.";
        }
        HttpResponseMessage response = await Http.PostAsJsonAsync<User>("/api/v1/Register", user);
        if (response.StatusCode.ToString() == "OK")
        {
            res = "Account created succesfully";
            badMessage = "";
            goodMessage = "";
            goodMessage +=  "Account created succesfully,you will be redirected to Login page.";
        }
        else
        {
            res = "Username already in use.";
            badMessage = "";
            badMessage += "Account already exists.";
        }

        timer = new System.Timers.Timer();
        timer.Interval = 3000;

        timer.Elapsed += (sender, args) =>
        {
            NavManager.NavigateTo("/login");
        };

        timer.AutoReset = true;
        timer.Enabled = true;
    }
}